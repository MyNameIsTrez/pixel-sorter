#include "cnpy.h"

#include <filesystem>
#include <getopt.h>
#include <iomanip>

static void print_help(char *program_name)
{
	std::cerr
		<< "Usage: " << program_name << " input_npy_path output_npy_path [-h] [-i ITERATIONS_IN_KERNEL_PER_CALL] [-s SECONDS_BETWEEN_SAVES] [-k KERNEL_RADIUS] [-n] [-z SAVED_IMAGE_LEADING_ZERO_COUNT] [-w WORKGROUP_SIZE]\n\n";

	std::cerr
		<< "positional arguments:\n"
		   "  input_npy_path        Input npy file path, generated by for example rgb2lab.py\n"
		   "  output_npy_path       Output npy file path, which can then be used by for example lab2rgb.py\n\n";

	std::cerr
		<< "options:\n"
		   "  -h, --help            show this help message and exit\n"
		   "  -i ITERATIONS_IN_KERNEL_PER_CALL, --iterations-in-kernel-per-call ITERATIONS_IN_KERNEL_PER_CALL\n"
		   "                        Setting this higher than 1 can give a massive speedup, but the end of the program may tell you it messed up the output image! (default: 1)\n"
		   "  -s SECONDS_BETWEEN_SAVES, --seconds-between-saves SECONDS_BETWEEN_SAVES\n"
		   "                        How often the current output image gets saved (default: 1)\n"
		   "  -k KERNEL_RADIUS, --kernel-radius KERNEL_RADIUS\n"
		   "                        The radius of neighbors that get compared against the current pixel's color; a higher radius means better sorting, but is quadratically slower (default: 100)\n"
		   "  -n, --no-overwriting-output\n"
		   "                        Save all output images, instead of the default behavior of overwriting (default: False)\n"
		   "  -z SAVED_IMAGE_LEADING_ZERO_COUNT, --saved-image-leading-zero-count SAVED_IMAGE_LEADING_ZERO_COUNT\n"
		   "                        The number of leading zeros on saved images; this has no effect if the -n switch isn't passed! (default: 4)\n"
		   "  -w WORKGROUP_SIZE, --workgroup-size WORKGROUP_SIZE\n"
		   "                        The workgroup size; the actually used workgroup size can be lower, and will be printed (default: 8)\n";
}

// c++ -Wall -Wextra -Werror -Wpedantic -Wfatal-errors -fsanitize=address,undefined -g -std=c++17 main.cpp cnpy.cpp -lz -o a.out && ./a.out "../input_npy/heart.npy" "../output_npy/heart.npy"
int main(int argc, char *argv[])
{
	int c;

	char *program_name = argv[0];

	while (1)
	{
		int option_index = 0;
		static struct option long_options[] = {
			{"help", no_argument, 0, 'h'},
			{"iterations-in-kernel-per-call", required_argument, 0, 'i'},
			{"seconds-between-saves", required_argument, 0, 's'},
			{"kernel-radius", required_argument, 0, 'k'},
			{"no-overwriting-output", no_argument, 0, 'n'},
			{"saved-image-leading-zero-count", required_argument, 0, 'z'},
			{"workgroup-size", required_argument, 0, 'w'},
			{0, 0, 0, 0}};

		c = getopt_long(argc, argv, "hi:s:k:nz:w:", long_options, &option_index);

		// Detect the end of the options
		if (c == -1)
		{
			break;
		}

		int iterations_in_kernel_per_call = 1;
		(void)iterations_in_kernel_per_call; // TODO: Use
		int seconds_between_saves = 1;
		(void)seconds_between_saves; // TODO: Use
		int kernel_radius = 100;
		(void)kernel_radius; // TODO: Use
		bool no_overwriting_output = false;
		(void)no_overwriting_output; // TODO: Use
		int saved_image_leading_zero_count = 4;
		(void)saved_image_leading_zero_count; // TODO: Use
		int workgroup_size = 8;
		(void)workgroup_size; // TODO: Use

		switch (c)
		{
		case 'h':
			print_help(program_name);
			return EXIT_FAILURE;

		case 'i':
			iterations_in_kernel_per_call = std::stoi(optarg);
			std::cout << "Set iterations_in_kernel_per_call to " << iterations_in_kernel_per_call << std::endl;
			break;

		case 's':
			seconds_between_saves = std::stoi(optarg);
			std::cout << "Set seconds_between_saves to " << seconds_between_saves << std::endl;
			break;

		case 'k':
			kernel_radius = std::stoi(optarg);
			std::cout << "Set kernel_radius to " << kernel_radius << std::endl;
			break;

		case 'n':
			no_overwriting_output = true;
			std::cout << "Set no_overwriting_output to " << no_overwriting_output << std::endl;
			break;

		case 'z':
			saved_image_leading_zero_count = std::stoi(optarg);
			std::cout << "Set saved_image_leading_zero_count to " << saved_image_leading_zero_count << std::endl;
			break;

		case 'w':
			workgroup_size = std::stoi(optarg);
			std::cout << "Set workgroup_size to " << workgroup_size << std::endl;
			break;

		case '?':
			// getopt_long() already printed an error message
			return EXIT_FAILURE;

		default:
			abort();
		}
	}

	// If not exactly two positional arguments were provided
	if (optind != argc - 2)
	{
		print_help(program_name);
		return EXIT_FAILURE;
	}

	// TODO: Use this so "_0000" can just be appended to .stem
	const std::filesystem::path input_npy_path(argv[argc - 2]);
	const std::filesystem::path output_npy_path(argv[argc - 1]);

	cnpy::NpyArray arr = cnpy::npy_load(input_npy_path);
	float *pixels = arr.data<float>();

	// TODO: Port sort.py its algorithm here
	// pixels[0] = 42.0f;

	int saved_results = 0;

	std::ostringstream ss;
	ss << std::setw(4) << std::setfill('0') << saved_results;
	std::string saved_results_str(ss.str());

	// Append "_0000" to the output filename's stem
	std::filesystem::path saved_filename(output_npy_path.stem().string() + "_" + saved_results_str + output_npy_path.extension().string());
	std::filesystem::path saved_path(output_npy_path.parent_path() / saved_filename);
	cnpy::npy_save(saved_path, pixels, arr.shape, "w");

	return EXIT_SUCCESS;
}
